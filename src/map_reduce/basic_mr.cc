#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::vector<KeyVal> ret;
        std::istringstream iss(content);
        std::string word;

        while (iss >> word) {
            ret.emplace_back(KeyVal(word, "1"));
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        int totalCount = 0;
        // 遍历每个值并累加
        for (const auto& value : values) {
            // 注意：在这个简化的版本中，我们预期每个值都是 "1"。
            // 实际上，您可以将值解析为整数并进行求和，但在这里我们直接累加。
            totalCount += std::stoi(value);
        }
        // 返回累加的结果作为字符串
        return std::to_string(totalCount);
    }

}